#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

use BIT\BIT;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class CaptureCommand extends Command
{
    protected static $defaultName = 'bit:capture';

    protected function configure()
    {
        $this
            ->setDescription('Capture a baseline for the given key.')
            ->addArgument('key', InputArgument::REQUIRED, 'The baseline key.')
            ->addArgument('data', InputArgument::REQUIRED, 'The baseline data (JSON).');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $key = $input->getArgument('key');
        $data = json_decode($input->getArgument('data'), true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            $output->writeln('<error>Invalid JSON data provided.</error>');
            return Command::FAILURE;
        }

        BIT::captureBaseline($key, $data);

        $output->writeln("Baseline captured for key: $key");
        return Command::SUCCESS;
    }
}

class ExtractCommand extends Command
{
    protected static $defaultName = 'bit:extract';

    protected function configure()
    {
        $this
            ->setDescription('Extract drift details for the given key and optional data.')
            ->addArgument('key', InputArgument::REQUIRED, 'The baseline key.')
            ->addArgument('data', InputArgument::OPTIONAL, 'The current data (JSON). If not provided, the stored baseline will be returned.');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $key = $input->getArgument('key');

        // Get the baseline data
        $filePath = BIT::getBaselineFilePath($key);
        if (!file_exists($filePath)) {
            $output->writeln('<error>Baseline not found for key: ' . $key . '</error>');
            return Command::FAILURE;
        }

        $baselineData = json_decode(file_get_contents($filePath), true);

        // If no data argument is provided, return the baseline data
        if (!$input->getArgument('data')) {
            $output->writeln('Stored Baseline:');
            $output->writeln(json_encode($baselineData, JSON_PRETTY_PRINT));
            return Command::SUCCESS;
        }

        // Compare the current data to the baseline
        $data = json_decode($input->getArgument('data'), true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            $output->writeln('<error>Invalid JSON data provided.</error>');
            return Command::FAILURE;
        }

        try {
            $result = BIT::getDriftDetails($key, $data);

            $output->writeln("Drift Detected: " . ($result['drift_detected'] ? 'true' : 'false'));
            $output->writeln("Summary: " . $result['summary']);
            $output->writeln("Details:");

            foreach ($result['details'] as $detail) {
                $output->writeln(sprintf(
                    "- %s: %s => %s",
                    ucfirst($detail['type']),
                    $detail['field'],
                    json_encode($detail['value'])
                ));
            }

            return Command::SUCCESS;
        } catch (\RuntimeException $e) {
            $output->writeln('<error>' . $e->getMessage() . '</error>');
            return Command::FAILURE;
        }
    }
}

class ListCommand extends Command
{
    protected static $defaultName = 'bit:list';

    protected function configure()
    {
        $this->setDescription('List all stored baselines.');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        // Get the storage directory
        $storageDir = BIT::getStorageDirectory();

        // Find all JSON files in the storage directory
        $baselines = glob("$storageDir/*.json");

        if (empty($baselines)) {
            $output->writeln('No baselines found.');
            return Command::SUCCESS;
        }

        // Display the list of baselines
        $output->writeln('Stored Baselines:');
        foreach ($baselines as $baseline) {
            $output->writeln('- ' . basename($baseline, '.json'));
        }

        return Command::SUCCESS;
    }
}

class DeleteCommand extends Command
{
    protected static $defaultName = 'bit:delete';

    protected function configure()
    {
        $this
            ->setDescription('Delete a specific baseline.')
            ->addArgument('key', InputArgument::REQUIRED, 'The baseline key to delete.');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $key = $input->getArgument('key');

        // Get the file path for the baseline
        $filePath = BIT::getBaselineFilePath($key);

        // Check if the baseline exists
        if (!file_exists($filePath)) {
            $output->writeln('<error>Baseline not found for key: ' . $key . '</error>');
            return Command::FAILURE;
        }

        // Delete the baseline file
        if (unlink($filePath)) {
            $output->writeln('Baseline deleted for key: ' . $key);
            return Command::SUCCESS;
        } else {
            $output->writeln('<error>Failed to delete baseline for key: ' . $key . '</error>');
            return Command::FAILURE;
        }
    }
}

class ClearCommand extends Command
{
    protected static $defaultName = 'bit:clear';

    protected function configure()
    {
        $this->setDescription('Clear all stored baselines.');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        // Get the storage directory
        $storageDir = BIT::getStorageDirectory();

        // Find all JSON files in the storage directory
        $baselines = glob("$storageDir/*.json");

        if (empty($baselines)) {
            $output->writeln('No baselines found to clear.');
            return Command::SUCCESS;
        }

        // Delete all baseline files
        $deletedCount = 0;
        foreach ($baselines as $baseline) {
            if (unlink($baseline)) {
                $deletedCount++;
            } else {
                $output->writeln('<error>Failed to delete baseline: ' . basename($baseline) . '</error>');
            }
        }

        if ($deletedCount > 0) {
            $output->writeln("Cleared $deletedCount baselines.");
        } else {
            $output->writeln('<error>No baselines were deleted.</error>');
        }

        return Command::SUCCESS;
    }
}

$application = new Application('BIT CLI', '1.0.0');
$application->add(new CaptureCommand());
$application->add(new ExtractCommand());
$application->add(new ListCommand());
$application->add(new DeleteCommand());
$application->add(new ClearCommand());
$application->run();